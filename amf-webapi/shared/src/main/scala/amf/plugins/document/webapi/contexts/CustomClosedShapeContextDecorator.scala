package amf.plugins.document.webapi.contexts

import amf.core.model.domain.Shape
import amf.core.remote.Vendor
import amf.core.validation.SeverityLevels
import amf.plugins.document.webapi.contexts.parser.{OasLikeSpecVersionFactory, OasLikeWebApiContext}
import amf.plugins.document.webapi.parser.spec.SpecSyntax
import org.yaml.model.{YMap, YNode, YPart}

class CustomClosedShapeContextDecorator(decorated: OasLikeWebApiContext,
                                        customSyntax: SpecSyntax,
                                        severities: Map[String, String])
    extends OasLikeWebApiContext(
      decorated.loc,
      decorated.refs,
      decorated.options,
      decorated,
      Some(decorated.declarations)
    ) {
  override val syntax: SpecSyntax = decorated.syntax
  override val vendor: Vendor     = decorated.vendor

  override def link(node: YNode): Either[String, YNode] = decorated.link(node)

  override def autoGeneratedAnnotation(s: Shape): Unit = decorated.autoGeneratedAnnotation(s)

  override val factory: OasLikeSpecVersionFactory = decorated.factory

  override def makeCopy(): OasLikeWebApiContext = decorated.makeCopy()

  override def specificClosedShape(node: String, shape: String, ast: YMap): Unit =
    closedShape(node, ast, shape, customSyntax)

  override protected def throwClosedShapeError(shape: String,
                                               node: String,
                                               message: String,
                                               entry: YPart,
                                               isWarning: Boolean): Unit = {
    val severity  = severities.getOrElse(shape, SeverityLevels.VIOLATION)
    val isWarning = severity == SeverityLevels.WARNING
    super.throwClosedShapeError(shape, node, message, entry, isWarning)
  }

}
